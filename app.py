import pickle
import streamlit as st
import numpy as np
import pandas as pd
from PIL import Image

model = pickle.load(open('DT.pkl', 'rb'))

st.title('Myocardial infarction complications')
st.sidebar.header('Input Data')
image = Image.open('heart.jpg')
st.image(image, '')
def user_input():        
    Age = st.sidebar.slider('Age', 26,92, 1 )
    Sex = st.sidebar.selectbox("Sex", [0, 1])
    INF_ANAM = st.sidebar.selectbox("INF_ANAM", [0, 1,2,3])
    STENOK_AN =st.sidebar.selectbox("STENOK_AN", [0, 1,2,3,4,5,6])
    FK_STENOK = st.sidebar.selectbox("FK_STENOK", [0, 1,2,3,4])
    IBS_POST = st.sidebar.selectbox("IBS_POST", [0, 1,2])
    GB = st.sidebar.selectbox("GB", [0, 1,2,3])
    SIM_GIPERT = st.sidebar.selectbox("SIM_GIPERT", [0, 1])
    DLIT_AG = st.sidebar.selectbox("DLIT_AG", [0, 1,2,3,4,5,6,7])
    ZSN_A = st.sidebar.selectbox("ZSN_A", [0, 1,2,3,4])      
    nr11 = st.sidebar.selectbox("nr11", [0, 1])
    nr01 = st.sidebar.selectbox("nr01", [0, 1])
    nr02 = st.sidebar.selectbox("nr02", [0, 1])
    nr03 = st.sidebar.selectbox("nr03", [0, 1])
    nr04 = st.sidebar.selectbox("nr04", [0, 1])
    nr07 = st.sidebar.selectbox("nr07", [0, 1])
    nr08 = st.sidebar.selectbox("nr08", [0, 1])
    np01 = st.sidebar.selectbox("np01", [0, 1])
    np04 = st.sidebar.selectbox("np04", [0, 1])
    np05 = st.sidebar.selectbox("np05", [0, 1])
    np07 = st.sidebar.selectbox("np07", [0, 1])
    np08 = st.sidebar.selectbox("np08", [0, 1])
    np09 = st.sidebar.selectbox("np09", [0, 1])
    np10 = st.sidebar.selectbox("np10", [0, 1])
    endocr_01 = st.sidebar.selectbox("endocr_01", [0, 1])
    endocr_02 = st.sidebar.selectbox("endocr_02", [0, 1])
    endocr_03 = st.sidebar.selectbox("endocr_03", [0, 1])
    zab_leg_01 = st.sidebar.selectbox("zab_leg_01", [0, 1])
    zab_leg_02 = st.sidebar.selectbox("zab_leg_02", [0, 1])
    zab_leg_03 = st.sidebar.selectbox("zab_leg_03", [0, 1])
    zab_leg_04 = st.sidebar.selectbox("zab_leg_04", [0, 1])
    zab_leg_06 = st.sidebar.selectbox("zab_leg_06", [0, 1])
    S_AD_ORIT = st.sidebar.slider('S_AD_ORIT', 0,260, 5 )
    D_AD_ORIT = st.sidebar.slider('D_AD_ORIT', 0,190, 5 )
    O_L_POST = st.sidebar.selectbox("O_L_POST", [0, 1])
    K_SH_POST = st.sidebar.selectbox("K_SH_POST", [0, 1])
    MP_TP_POST = st.sidebar.selectbox("MP_TP_POST", [0, 1])
    SVT_POST = st.sidebar.selectbox("SVT_POST", [0, 1])
    GT_POST = st.sidebar.selectbox("GT_POST", [0, 1])
    FIB_G_POST = st.sidebar.selectbox("FIB_G_POST", [0, 1])
    ant_im =st.sidebar.selectbox("ant_im", [0, 1,2,3,4])
    lat_im = st.sidebar.selectbox("lat_im", [0, 1,2,3,4])
    inf_im = st.sidebar.selectbox("inf_im", [0, 1,2,3,4])
    post_im = st.sidebar.selectbox("post_im", [0, 1,2,3,4])
    IM_PG_P =st.sidebar.selectbox("IM_PG_P", [0, 1])
    ritm_ecg_p_01 =st.sidebar.selectbox("ritm_ecg_p_01", [0, 1])
    ritm_ecg_p_02 =st.sidebar.selectbox("ritm_ecg_p_02", [0, 1])
    ritm_ecg_p_04 =st.sidebar.selectbox("ritm_ecg_p_04", [0, 1])
    ritm_ecg_p_06 =st.sidebar.selectbox("ritm_ecg_p_06", [0, 1])
    ritm_ecg_p_07 =st.sidebar.selectbox("ritm_ecg_p_07", [0, 1])
    ritm_ecg_p_08 =st.sidebar.selectbox("ritm_ecg_p_08", [0, 1])
    n_r_ecg_p_01 =st.sidebar.selectbox("n_r_ecg_p_01", [0, 1])
    n_r_ecg_p_02 =st.sidebar.selectbox("n_r_ecg_p_02", [0, 1])
    n_r_ecg_p_03 =st.sidebar.selectbox("n_r_ecg_p_03", [0, 1])
    n_r_ecg_p_04 =st.sidebar.selectbox("n_r_ecg_p_04", [0, 1])
    n_r_ecg_p_05 =st.sidebar.selectbox("n_r_ecg_p_05", [0, 1])
    n_r_ecg_p_06 =st.sidebar.selectbox("n_r_ecg_p_06", [0, 1])
    n_r_ecg_p_08 =st.sidebar.selectbox("n_r_ecg_p_08", [0, 1])
    n_r_ecg_p_09 =st.sidebar.selectbox("n_r_ecg_p_09", [0, 1])
    n_r_ecg_p_10=st.sidebar.selectbox("n_r_ecg_p_10", [0, 1])
    n_p_ecg_p_01=st.sidebar.selectbox("n_p_ecg_p_01", [0, 1])
    n_p_ecg_p_03=st.sidebar.selectbox("n_p_ecg_p_03", [0, 1])
    n_p_ecg_p_04=st.sidebar.selectbox("n_p_ecg_p_04", [0, 1])
    n_p_ecg_p_05=st.sidebar.selectbox("n_p_ecg_p_05", [0, 1])
    n_p_ecg_p_06=st.sidebar.selectbox("n_p_ecg_p_06", [0, 1])
    n_p_ecg_p_07=st.sidebar.selectbox("n_p_ecg_p_07", [0, 1])
    n_p_ecg_p_08=st.sidebar.selectbox("n_p_ecg_p_08", [0, 1])
    n_p_ecg_p_09=st.sidebar.selectbox("n_p_ecg_p_09", [0, 1])
    n_p_ecg_p_10=st.sidebar.selectbox("n_p_ecg_p_10", [0, 1])
    n_p_ecg_p_11=st.sidebar.selectbox("n_p_ecg_p_11", [0, 1])
    n_p_ecg_p_12=st.sidebar.selectbox("n_p_ecg_p_12", [0, 1])
    fibr_ter_01=st.sidebar.selectbox("fibr_ter_01", [0, 1])
    fibr_ter_02=st.sidebar.selectbox("fibr_ter_02", [0, 1])
    fibr_ter_03=st.sidebar.selectbox("fibr_ter_03", [0, 1])
    fibr_ter_05=st.sidebar.selectbox("fibr_ter_05", [0, 1])
    fibr_ter_06=st.sidebar.selectbox("fibr_ter_06", [0, 1])
    fibr_ter_07=st.sidebar.selectbox("fibr_ter_07", [0, 1])
    fibr_ter_08=st.sidebar.selectbox("fibr_ter_08", [0, 1])
    GIPO_K=st.sidebar.selectbox("GIPO_K", [0, 1])
    K_BLOOD=st.sidebar.slider('K_BLOOD', 2,9, 1 )
    GIPER_Na=st.sidebar.selectbox("GIPER_Na", [0, 1])
    NA_BLOOD=st.sidebar.slider('NA_BLOOD', 117,169, 1 )
    ALT_BLOOD=st.sidebar.slider('ALT_BLOOD', 0,3, 1 )
    AST_BLOOD=st.sidebar.slider('AST_BLOOD', 0,3, 1 )
    L_BLOOD=st.sidebar.slider('L_BLOOD', 2,28, 1 )
    ROE=st.sidebar.slider('ROE', 1,140, 1 )
    TIME_B_S=st.sidebar.selectbox("TIME_B_S", [0, 1,2,3,4,5,6,7,8,9])
    R_AB_1_n=st.sidebar.selectbox("R_AB_1_n", [0, 1,2,3])
    R_AB_2_n=st.sidebar.selectbox("R_AB_2_n", [0, 1,2,3])
    R_AB_3_n=st.sidebar.selectbox("R_AB_3_n", [0, 1,2,3])
    NA_KB=st.sidebar.selectbox("NA_KB", [0, 1])
    LID_KB=st.sidebar.selectbox("LID_KB", [0, 1])
    NITR_S=st.sidebar.selectbox("NITR_S", [0, 1])
    NA_R_1_n=st.sidebar.selectbox("NA_R_1_n", [0, 1,2,3,4])
    NA_R_2_n=st.sidebar.selectbox("NA_R_2_n", [0, 1,2,3])
    NA_R_3_n=st.sidebar.selectbox("NA_R_3_n", [0, 1,2])
    NOT_NA_1_n=st.sidebar.selectbox("NOT_NA_1_n", [0, 1,2,3,4])
    NOT_NA_2_n=st.sidebar.selectbox("NOT_NA_2_n", [0, 1,2,3])
    NOT_NA_3_n=st.sidebar.selectbox("NOT_NA_3_n", [0, 1,2])
    LID_S_n=st.sidebar.selectbox("LID_S_n", [0, 1])
    B_BLOK_S_n=st.sidebar.selectbox("B_BLOK_S_n", [0, 1])
    ANT_CA_S_n=st.sidebar.selectbox("ANT_CA_S_n", [0, 1])
    GEPAR_S_n=st.sidebar.selectbox("GEPAR_S_n", [0, 1])
    ASP_S_n=st.sidebar.selectbox("ASP_S_n", [0, 1])
    TIKL_S_n=st.sidebar.selectbox("TIKL_S_n", [0, 1])
    TRENT_S_n=st.sidebar.selectbox("TRENT_S_n", [0, 1])
    FIBR_PREDS=st.sidebar.selectbox("FIBR_PREDS", [0, 1])
    PREDS_TAH=st.sidebar.selectbox("PREDS_TAH", [0, 1])
    JELUD_TAH=st.sidebar.selectbox("JELUD_TAH", [0, 1])
    FIBR_JELUD=st.sidebar.selectbox("FIBR_JELUD", [0, 1])
    A_V_BLOK=st.sidebar.selectbox("A_V_BLOK", [0, 1])
    OTEK_LANC=st.sidebar.selectbox("OTEK_LANC", [0, 1])
    RAZRIV=st.sidebar.selectbox("RAZRIV", [0, 1])
    DRESSLER=st.sidebar.selectbox("DRESSLER", [0, 1])
    ZSN=st.sidebar.selectbox("ZSN", [0, 1])
    REC_IM=st.sidebar.selectbox("REC_IM", [0, 1])
    P_IM_STEN=st.sidebar.selectbox("P_IM_STEN", [0, 1])
    
    input_list = { 'AGE' :Age,'SEX':Sex,'INF_ANAM':INF_ANAM,'STENOK_AN':STENOK_AN,'FK_STENOK':FK_STENOK,'IBS_POST':IBS_POST,'GB':GB,'SIM_GIPERT':SIM_GIPERT,'DLIT_AG':DLIT_AG,'ZSN_A':ZSN_A,'nr_11':nr11,'nr_01':nr01,'nr_02':nr02,'nr_03':nr03,'nr_04':nr04,'nr_07':nr07,'nr_08':nr08,'np_01':np01,'np_04':np04,'np_05':np05,'np_07':np07,'np_08':np08,'np_09':np09,'np_10':np10,'endocr_01':endocr_01,'endocr_02':endocr_02,'endocr_03':endocr_03,'zab_leg_01':zab_leg_01,'zab_leg_02':zab_leg_02,'zab_leg_03':zab_leg_03,'zab_leg_04':zab_leg_04,'zab_leg_06':zab_leg_06,'S_AD_ORIT':S_AD_ORIT,'D_AD_ORIT':D_AD_ORIT,'O_L_POST':O_L_POST,'K_SH_POST':K_SH_POST,'MP_TP_POST':MP_TP_POST,'SVT_POST':SVT_POST,'GT_POST':GT_POST,'FIB_G_POST':FIB_G_POST,'ant_im':ant_im,'lat_im':lat_im,'inf_im':inf_im,'post_im':post_im,'IM_PG_P':IM_PG_P,'ritm_ecg_p_01':ritm_ecg_p_01,'ritm_ecg_p_02':ritm_ecg_p_02,'ritm_ecg_p_04':ritm_ecg_p_04,'ritm_ecg_p_06':ritm_ecg_p_06,
  'ritm_ecg_p_07':  ritm_ecg_p_07, 'ritm_ecg_p_08':  ritm_ecg_p_08, 'n_r_ecg_p_01': n_r_ecg_p_01, 'n_r_ecg_p_02':  n_r_ecg_p_02,'n_r_ecg_p_03':n_r_ecg_p_03,'n_r_ecg_p_04':n_r_ecg_p_04,'n_r_ecg_p_05':n_r_ecg_p_05,'n_r_ecg_p_06':n_r_ecg_p_06,'n_r_ecg_p_08':n_r_ecg_p_08,'n_r_ecg_p_09':n_r_ecg_p_09,'n_r_ecg_p_10':n_r_ecg_p_10,'n_p_ecg_p_01':n_p_ecg_p_01,'n_p_ecg_p_03':n_p_ecg_p_03,'n_p_ecg_p_04':n_p_ecg_p_04,'n_p_ecg_p_05':n_p_ecg_p_05,'n_p_ecg_p_06':n_p_ecg_p_06,'n_p_ecg_p_07':n_p_ecg_p_07,'n_p_ecg_p_08':n_p_ecg_p_08,'n_p_ecg_p_09':n_p_ecg_p_09,'n_p_ecg_p_10':n_p_ecg_p_10,'n_p_ecg_p_11':n_p_ecg_p_11,'n_p_ecg_p_12':n_p_ecg_p_12,'fibr_ter_01':fibr_ter_01,'fibr_ter_02':fibr_ter_02,'fibr_ter_03':fibr_ter_03,'fibr_ter_05':fibr_ter_05,'fibr_ter_06':fibr_ter_06,'fibr_ter_07':fibr_ter_07,'fibr_ter_08':fibr_ter_08,'GIPO_K':GIPO_K,'K_BLOOD':round(K_BLOOD,2),'GIPER_NA':GIPER_Na,'NA_BLOOD':NA_BLOOD,'ALT_BLOOD':round(ALT_BLOOD,2),'AST_BLOOD':round(AST_BLOOD,2),'L_BLOOD':round(L_BLOOD,2),'ROE':ROE,
  'TIME_B_S':TIME_B_S,'R_AB_1_n':R_AB_1_n,'R_AB_2_n':R_AB_2_n,'R_AB_3_n':R_AB_3_n,'NA_KB':NA_KB,'LID_KB':LID_KB,'NITR_S':NITR_S,'NA_R_1_n':NA_R_1_n,'NA_R_2_n':NA_R_2_n,'NA_R_3_n':NA_R_3_n,'NOT_NA_1_n':NOT_NA_1_n,'NOT_NA_2_n':NOT_NA_2_n,'NOT_NA_3_n':NOT_NA_3_n,'LID_S_n':LID_S_n,'B_BLOK_S_n':B_BLOK_S_n,'ANT_CA_S_n':ANT_CA_S_n,'GEPAR_S_n':GEPAR_S_n,'ASP_S_n':ASP_S_n,'TIKL_S_n':TIKL_S_n,'TRENT_S_n':TRENT_S_n,'FIBR_PREDS':FIBR_PREDS,'PREDS_TAH':PREDS_TAH,'JELUD_TAH':JELUD_TAH,'FIBR_JELUD':FIBR_JELUD,'A_V_BLOK':A_V_BLOK,'OTEK_LANC':OTEK_LANC,'RAZRIV':RAZRIV,'DRESSLER':DRESSLER,'ZSN':ZSN,'REC_IM':REC_IM,'P_IM_STEN':P_IM_STEN}
    report_data = pd.DataFrame(input_list, index=[0])
    return report_data

user_data = user_input()
st.header("Patient's Data")
st.write(user_data)


df_norm = user_data.fillna(0)


final = df_norm.values.tolist()

predicted_value = model.predict(final)

a = np.round(predicted_value[0], 2)
st.subheader('OutPut Value:')
if a == 0:
    st.subheader('Lethal outcome (cause) (LET_IS) is unkown- alive, with value  '+str(np.round(predicted_value[0], 2)))
elif a == 1:
    st.subheader('Lethal outcome (cause) (LET_IS) is cardiogenic shock, with value  '+str(np.round(predicted_value[0], 2)))
elif a == 2:
    st.subheader('Lethal outcome (cause) (LET_IS) is pulmonary edema, with value  '+str(np.round(predicted_value[0], 2)))
elif a == 3:
    st.subheader('Lethal outcome (cause) (LET_IS) is myocardial rupture, with value  '+str(np.round(predicted_value[0], 2)))
elif a == 4:
    st.subheader('Lethal outcome (cause) (LET_IS) is progress of congestive heart failure, with value  '+str(np.round(predicted_value[0], 2)))
elif a == 5:
    st.subheader('Lethal outcome (cause) (LET_IS) is thromboembolism , with value  '+str(np.round(predicted_value[0], 2)))
elif a == 6:
    st.subheader('Lethal outcome (cause) (LET_IS) is asystole , with value  '+str(np.round(predicted_value[0], 2)))
elif a == 7:
    st.subheader('Lethal outcome (cause) (LET_IS) is ventricular fibrillation, with value  '+str(np.round(predicted_value[0], 2)))
else:
    pass


